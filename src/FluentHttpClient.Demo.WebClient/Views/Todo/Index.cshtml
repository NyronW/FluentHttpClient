@model FluentHttpClient.AccessToken
@{
    var cPageNo = Context.Request.Query["pageno"];
    var pageNo = string.IsNullOrEmpty(cPageNo) ? 1 : Convert.ToInt32(cPageNo);

    var nextPageNo = pageNo + 1;
    var prevPageNo = pageNo - 1;

    if (prevPageNo < 1) prevPageNo = 1;

    var cPageSize = Context.Request.Query["pagesize"];
    var pageSize = string.IsNullOrEmpty(cPageSize) ? 10 : Convert.ToInt32(cPageSize);
}
<h1>Todo List</h1>
<hr />
<p>
    This demo show how to leverage asynchronous streaming from api (using <a href="https://github.com/NyronW/MinimalEndpoints">MinimalEndpoint</a>) and javascript. The server side async stream
    code is commented as asp.net view won't show the data being streamed from the API. You can view the code behind to see how async streaming is handled in dotnet clients using FluentHttp
</p>

@if (TempData["Message"] != null)
{
    <h5 class="text-info">@TempData["Message"]</h5>
}



<div class="row pt-2">
    <div class="col-2">
        <a asp-area="" asp-action="create" class="btn btn-sm btn-success">Add new</a>
    </div>

    <div class="col-4">
        <button id="prevPageBtn" class="btn btn-sm btn-primary" onclick="prevPage()" disabled>Prev Page</button>
        <button id="nextPageBtn" class="btn btn-sm btn-primary" onclick="nextPage()">Next Page</button>
    </div>

    <div class="col-3">
        <b id="totalItems">Total Items: 0</b>
    </div>
    <div class="col-1 align-content-end">
        Page Size
    </div>
    <div class="col-2">
        <button class="btn round-btn" onclick="changePageSize(10)">10</button>
        <button class="btn round-btn" onclick="changePageSize(20)">20</button>
        <button class="btn round-btn" onclick="changePageSize(50)">50</button>
    </div>
</div>

<table id="todoTable" class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Description</th>
            <th>Completed</th>
            <th></th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

@section Styles {
    <style>
        /* Add initial and animated styles for rows */
        .table-row {
            opacity: 0; /* Initially hidden */
            transform: translateY(20px); /* Start slightly below */
            transition: opacity 0.5s ease, transform 0.5s ease; /* Smooth transition */
        }

            .table-row.visible {
                opacity: 1; /* Fully visible */
                transform: translateY(0); /* Move to the original position */
            }

        .btn.round-btn {
            border: 2px solid #007bff; /* Blue border */
            color: #007bff; /* Blue text */
            background-color: white; /* White background */
            width: 40px; /* Set equal width */
            height: 40px; /* Set equal height */
            border-radius: 50%; /* Make the button perfectly circular */
            font-size: 14px; /* Font size */
            display: inline-flex; /* Center the text */
            justify-content: center; /* Center horizontally */
            align-items: center; /* Center vertically */
            cursor: pointer; /* Pointer cursor for hover */
            transition: all 0.3s ease; /* Smooth hover effect */
        }

            .btn.round-btn:hover {
                background-color: #007bff; /* Blue background on hover */
                color: white; /* White text on hover */
            }

            .btn.round-btn:focus {
                outline: none; /* Remove focus outline */
                box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* Focus glow */
            }

    </style>
}

@section Scripts {
    <script type="text/javascript">
        let pageNumber = 1;
        let pageSize = 10;

        async function nextPage() {
            pageNumber++;
            document.querySelector('#prevPageBtn').removeAttribute('disabled');
            await loadPage();
        }

        async function prevPage() {
            if (pageNumber <= 1) {
                return;
            }

            pageNumber--;
            await loadPage();
        }

        async function changePageSize(size) {
            if (size <= 1) {
                return;
            }

            pageSize = size;
            await loadPage();
        }

        async function loadPage() {
            try {
                const response = await fetch(`@(ViewData["ApiUrl"])?pageNo=${pageNumber}&pageSize=${pageSize}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': 'Bearer @Model.Token'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                if (pageNumber <= 1) {
                    document.querySelector('#prevPageBtn').setAttribute('disabled', true);
                }

                // Get the x-total-items value from the response headers
                const totalItems = response.headers.get('X-Total-Items');
                console.log('Total Items:', totalItems);

                // Update the total items display if it exists
                const totalItemsElement = document.querySelector('#totalItems');
                if (totalItemsElement) {
                    totalItemsElement.textContent = `Total Items: ${totalItems || 'N/A'}`;
                }

                const reader = response.body.getReader();
                const decoder = new TextDecoder('utf-8');
                let jsonBuffer = ''; // Buffer to accumulate chunks
                let isFirstChunk = true; // Handle the start of the array

                // Clear the current table rows before adding new data
                const tableBody = document.querySelector('#todoTable tbody');
                tableBody.innerHTML = '';

                while (true) {
                    const { value, done } = await reader.read();

                    if (done) {
                        break;
                    }

                    // Decode the chunk and append it to the buffer
                    const chunk = decoder.decode(value, { stream: true }).trim();
                    jsonBuffer += chunk;

                    // Process the JSON buffer to extract and handle Todo items
                    jsonBuffer = processJsonBuffer(jsonBuffer, isFirstChunk);
                    isFirstChunk = false; // Only the first chunk starts with a `[`
                }

                // Process any remaining buffer (e.g., in case of an incomplete item)
                processJsonBuffer(jsonBuffer, false, true); // Finalize parsing
            } catch (error) {
                console.error('Error fetching Todo items:', error);
            }
        }

        function processJsonBuffer(buffer, isFirstChunk, isFinal = false) {
            if (isFirstChunk) {
                // Remove the starting bracket "[" from the first chunk
                buffer = buffer.replace(/^\[/, '');
            }

            if (isFinal) {
                // Remove the ending bracket "]" from the last chunk
                buffer = buffer.replace(/\]$/, '');
            }

            // Split the buffer into individual JSON objects based on commas
            const items = buffer.split(/,(?={)/g);

            // Process all complete JSON objects except the last one, which may be incomplete
            for (let i = 0; i < items.length; i++) {
                const isLastItem = i === items.length - 1;
                const jsonString = items[i];

                try {
                    if (!isLastItem || isFinal) {
                        // Try parsing the item only if it's not the last incomplete item or we're finalizing
                        const todoItem = JSON.parse(jsonString.trim());
                        addRowToTable(todoItem);
                    } else {
                        // Leave the last incomplete item in the buffer
                        return jsonString.trim();
                    }
                } catch (err) {
                    console.error('Error parsing JSON:', err);
                    return jsonString.trim(); // Return unprocessed portion
                }
            }

            return ''; // Return empty buffer if all items are processed
        }

        function addRowToTable(todoItem) {
            const tableBody = document.querySelector('#todoTable tbody');
            const row = document.createElement('tr');

            // Add animation classes
            row.classList.add('table-row');

            // Create cells for ID, Title, Description, and Completed
            const idCell = document.createElement('td');
            idCell.textContent = todoItem.id;
            row.appendChild(idCell);
             
            const titleCell = document.createElement('td');
            titleCell.textContent = todoItem.title;
            row.appendChild(titleCell);

            const descriptionCell = document.createElement('td');
            descriptionCell.textContent = todoItem.description || 'N/A';
            row.appendChild(descriptionCell);

            const completedCell = document.createElement('td');
            completedCell.textContent = todoItem.completed ? 'Yes' : 'No';
            row.appendChild(completedCell);

            // Append the row to the table body
            tableBody.appendChild(row);

            // Add the `visible` class after a short delay to trigger the animation
            setTimeout(() => row.classList.add('visible'), 50);
        }

        // Call the function when the DOM is ready
        document.addEventListener("DOMContentLoaded", function () {
            // Load the first page with default page size
            loadPage(1, 10);
        });
    </script>
}
